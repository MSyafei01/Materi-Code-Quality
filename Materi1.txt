Pengantar Code Quality

- Pemanfaatan fitur type check untuk JavaScript guna meningkatkan kepercayaan diri developer.
- Menjaga konsistensi gaya penulisan kode sesuai dengan aturan-aturan yang ditetapkan.
- Menambahkan safety net, yaitu pengujian otomatis (automated test) sebagai salah satu praktik 
    untuk mencegah error dan membantu terbebas dari bugs.

beberapa objektif pembelajaran yang akan Anda capai pada materi ini :

- Menjabarkan tools yang dapat digunakan untuk mengecek tipe data ketika menulis kode JavaScript.
- Menguji sebuah fungsi sederhana dalam JavaScript dengan menggunakan teknik unit test.
- Memperbaiki kode dengan gaya yang tidak konsisten menjadi konsisten berdasarkan aturan yang 
    didefinisikan.

Statically-Typed vs. Dynamically-Typed Language
- Static: tipe nilai diperiksa saat compile.
- Dynamic: tipe nilai diperiksa ketika eksekusi (runtime).

 myNum dibuat dan diisyaratkan untuk menyimpan nilai integer (number untuk JavaScript). 
    Compiler akan mengembalikan tipe error jika kita memberi nilai selain integer.

----------------------------------------------------------------------
let myNum = 0;
myNum = 1;

console.log(myNum) // 1

myNum = true;

console.log(myNum) // true
output :
1 
true
----------------------------------------------------------------------


JSDoc, Alat Dokumentasi Kode
JSDoc adalah sebuah alat untuk menghasilkan dokumentasi kode JavaScript. 
    Untuk memberikan deskripsi, kita akan memanfaatkan fitur komentar langsung pada sumber kodenya. 
    Lebih tepatnya, komentar disajikan sebelum kode itu sendiri. Komentar ini sebut saja JSDoc comment.


Flow, Type Check Library
Flow adalah sebuah library (terjemahan dalam bahasa Indonesia: pustaka) yang dapat menambahkan pemeriksaan type 
    untuk kode JavaScript. Library ini seakan-akan dapat menambahkan type check layer (lapisan pemeriksaan tipe) 
    sebelum dieksekusi mesin.

Code Convention dengan Linter Library
Ada beberapa library yang dapat menunjang kualitas kode kita, yaitu ESLint, StandardJS, dan JSHint. 
    Para linter ini akan memberikan feedback setelah berhasil menganalisis kode Anda jika terdeteksi 
    inkonsistensi pada penulisannya. 

Ada tiga kategori yang tersedia pada setiap rule-nya berdasarkan tingkat keparahan.

“off” atau 0: aturan tersebut tidak dipermasalahkan atau dimatikan.
“warn” atau 1: aturan ditetapkan sebagai peringatan saja saat dilanggar.
“error” atau 2: aturan wajib dipatuhi dan program dapat mengalami error.


Testing dalam Node.js
Pengujian pada Node.js membutuhkan dua buah module, yaitu node:test dan node:assert. 
node:test berperan sebagai test runner yang menawarkan API untuk menuliskan skenario pengujian. 

Susun Pengaman dengan Testing
Mari kita contohkan langsung dengan kasus sederhana. Kita memiliki satu function yang perlu diuji ketepatan dan 
    kekuatannya. 



Function itu adalah add. Ia adalah salah satu fungsi kalkulator dan membutuhkan dua parameter yang akan diproses 
    dengan operasi penjumlahan.

export function add(numA, numB) {
  return numA + numB;
}

Function add dapat mengoperasikan penjumlahan aritmetika dengan baik.
Function add membangkitkan error jika nilai argumen dari numA tidak bertipe number.
Function add membangkitkan error jika nilai argumen dari numB tidak bertipe number.

Aliases
Sebagian developer lebih menyukai it daripada test ketika mendefinisikan test case. 
    Keduanya memiliki tujuan yang identik. Dengan it, pembacaan kasus pengujian menjadi lebih gampang.

it('should add correctly') ⇒ itu harus ditambahkan dengan benar.



------------------


🔑 Kesimpulan Code Quality

Type System & Type Safety

JavaScript itu dynamic & weakly-typed, sehingga rawan bug.

Solusinya:

Tambahkan JSDoc → dokumentasi + hint tipe data.

Gunakan Flow atau TypeScript → memberikan static type checking sebelum runtime.

👉 Tujuan: mencegah bug yang muncul karena kesalahan tipe data.

Style Guide & Code Convention

Menulis kode bukan hanya tentang "jalan atau tidak", tapi juga rapi, konsisten, mudah dibaca & dikerjakan tim.

Solusi:

Terapkan style guide (aturan penulisan kode).

Gunakan ESLint untuk memberi feedback otomatis saat gaya penulisan salah.

👉 Tujuan: memudahkan kolaborasi & menjaga kualitas kode jangka panjang.

Testing (Pengujian Program)

Testing itu bagian penting dari code quality karena memastikan program berjalan sesuai ekspektasi.

Ada 2 jenis:

Manual testing → jalankan program & cek output.

Automated testing (disarankan) → gunakan node:test, bun:test, jest, dsb.

Prinsip AAA (Arrange, Act, Assert) dipakai agar pengujian lebih terstruktur.

👉 Tujuan: meminimalisir bug & error sejak dini sebelum program dipakai user.

🎯 Jadi kesimpulan akhirnya:

Code Quality bukan hanya soal testing saja, tapi kombinasi dari:

menjaga kebenaran tipe data (type system),

menulis kode dengan konsisten & rapi (style guide + linter),

serta memastikan kode benar-benar berfungsi sesuai ekspektasi (testing).